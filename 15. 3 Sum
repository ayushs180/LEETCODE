vector<vector<int>> threeSum(vector<int>& nums) {
    vector<vector<int>> result;
    int n = nums.size();

    // Sort the array to handle duplicates efficiently
    sort(nums.begin(), nums.end());

    for (int i = 0; i < n - 2; ++i) {
        // Skip duplicates for the first number
        if (i > 0 && nums[i] == nums[i - 1]) {
            continue;
        }

        int target = -nums[i];
        int left = i + 1;
        int right = n - 1;

        while (left < right) {
            int currentSum = nums[left] + nums[right];

            if (currentSum == target) {
                result.push_back({nums[i], nums[left], nums[right]});

                // Skip duplicates for the second number
                while (left < right && nums[left] == nums[left + 1]) {
                    ++left;
                }

                // Skip duplicates for the third number
                while (left < right && nums[right] == nums[right - 1]) {
                    --right;
                }

                ++left;
                --right;
            } else if (currentSum < target) {
                ++left;
            } else {
                --right;
            }
        }
    }

    return result;
}
